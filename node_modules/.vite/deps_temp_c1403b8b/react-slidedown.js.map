{
  "version": 3,
  "sources": ["../../react-slidedown/lib/slidedown.tsx"],
  "sourcesContent": ["import React, { forwardRef, Component } from 'react'\n\ninterface SlideDownContentProps extends SlideDownProps {\n    forwardedRef: React.Ref<HTMLDivElement> | null\n}\n\ninterface SlideDownContentState {\n    children: React.ReactNode\n    childrenLeaving: boolean\n}\n\nclass SlideDownContent extends Component<SlideDownContentProps, SlideDownContentState> {\n\n    static defaultProps = {\n        transitionOnAppear: true,\n        closed: false\n    }\n\n    private outerRef: HTMLDivElement | null = null\n\n    constructor(props: SlideDownContentProps) {\n        super(props)\n\n        this.state = {\n            children: props.children,\n            childrenLeaving: false\n        }\n    }\n\n    private handleRef = (ref: HTMLDivElement | null) => {\n        /* Handle both the internal and forwardedRef and maintain correct typings */\n        this.outerRef = ref\n\n        if (this.props.forwardedRef) {\n            if (typeof this.props.forwardedRef === 'function') {\n                this.props.forwardedRef(ref)\n            } else if (typeof this.props.forwardedRef === 'object') {\n                const forwardedRef = this.props.forwardedRef as any\n                forwardedRef.current = ref\n            } else {\n                throw new Error(`Invalid forwardedRef ${this.props.forwardedRef}`)\n            }\n        }\n    }\n\n    componentDidMount() {\n        if (this.outerRef) {\n            if (this.props.closed || !this.props.children) {\n                this.outerRef.classList.add('closed')\n                this.outerRef.style.height = '0px'\n            } else if (this.props.transitionOnAppear) {\n                this.startTransition('0px')\n            } else {\n                this.outerRef.style.height = 'auto'\n            }\n        }\n    }\n\n    getSnapshotBeforeUpdate() {\n        /* Prepare to resize */\n        return this.outerRef ? this.outerRef.getBoundingClientRect().height + 'px' : null\n    }\n\n    static getDerivedStateFromProps(props: SlideDownContentProps, state: SlideDownContentState) {\n        if (props.children) {\n            return {\n                children: props.children,\n                childrenLeaving: false\n            }\n        } else if (state.children) {\n            return {\n                children: state.children,\n                childrenLeaving: true\n            }\n        } else {\n            return null\n        }\n    }\n\n    componentDidUpdate(_prevProps, _prevState, snapshot: string | null) {\n        if (this.outerRef) {\n            this.startTransition(snapshot)\n        }\n    }\n\n    private startTransition(prevHeight: string) {\n        let endHeight = '0px'\n\n        if (!this.props.closed && !this.state.childrenLeaving && this.state.children) {\n            this.outerRef.classList.remove('closed')\n            this.outerRef.style.height = 'auto'\n            endHeight = getComputedStyle(this.outerRef).height\n        }\n\n        if (parseFloat(endHeight).toFixed(2) !== parseFloat(prevHeight).toFixed(2)) {\n            this.outerRef.classList.add('transitioning')\n            this.outerRef.style.height = prevHeight\n            this.outerRef.offsetHeight // force repaint\n            this.outerRef.style.transitionProperty = 'height'\n            this.outerRef.style.height = endHeight\n        }\n    }\n\n    private endTransition() {\n        this.outerRef.classList.remove('transitioning')\n        this.outerRef.style.transitionProperty = 'none'\n        this.outerRef.style.height = this.props.closed ? '0px' : 'auto'\n\n        if (this.props.closed || !this.state.children) {\n            this.outerRef.classList.add('closed')\n        }\n    }\n\n    private handleTransitionEnd = (evt: React.TransitionEvent) => {\n        if ((evt.target === this.outerRef) && (evt.propertyName === 'height')) {\n            if (this.state.childrenLeaving) {\n                this.setState({ children: null, childrenLeaving: false }, () => this.endTransition())\n            } else {\n                this.endTransition()\n            }\n        }\n    }\n\n    render() {\n        const { as = 'div', children, className, closed, transitionOnAppear, forwardedRef, ...rest } = this.props\n        const containerClassName = className ? 'react-slidedown ' + className : 'react-slidedown'\n\n        return React.createElement(\n            as,\n            {\n                ref: this.handleRef,\n                className: containerClassName,\n                onTransitionEnd: this.handleTransitionEnd,\n                ...rest\n            },\n            this.state.children\n        );\n    }\n}\n\ninterface SlideDownProps extends React.HTMLAttributes<HTMLDivElement> {\n    as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;\n    closed?: boolean\n    transitionOnAppear?: boolean\n}\n\nexport const SlideDown = forwardRef((props: SlideDownProps, ref: React.Ref<HTMLDivElement>) => (\n    <SlideDownContent {...props} forwardedRef={ref} />\n))\n\nexport default SlideDown\n"],
  "mappings": "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",
  "names": ["SlideDownContent"]
}
